// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ListIterator = {"": ["i", "list"],
 "super": "Object",
 get$hasNext: function() {
  return $.lt(this.i, this.list.length);
},
 next$0: function() {
  var value, t1;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  value = this.list[this.i];
  t1 = this.i;
  if (typeof t1 !== 'number')
    return this.next$0$bailout0(1, t1, value);
  this.i = t1 + 1;
  return value;
},
 next$0$bailout0: function(state0, t1, value) {
  this.i = $.add(t1, 1);
  return value;
}
};

$$.Closure = {
 "super": "Object",
 toString$0: function() {
  return "Closure";
}
};

$$.Dynamic_ = {
 "super": "Object"
};

$$.Creates = {"": ["types"],
 "super": "Object"
};

$$.Returns = {"": ["types"],
 "super": "Object"
};

$$.Null = {
 "super": "Object"
};

$$.MetaInfo = {"": ["_tag?", "_tags", "_set?"],
 "super": "Object"
};

$$.JSSyntaxRegExp = {"": ["_lib0_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 get$pattern: function() {
  return this._lib0_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$RegExp: true
};

$$.bool = {
 "super": "Object",
 is$bool: true
};

$$.NullThrownError = {
 "super": "Object",
 toString$0: function() {
  return "Throw of null.";
}
};

$$.ArgumentError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return "Illegal argument(s): " + $.S(t1);
  return "Illegal argument(s)";
}
};

$$.RangeError = {"": ["message"],
 "super": "ArgumentError",
 toString$0: function() {
  return "RangeError: " + $.S(this.message);
}
};

$$.NoSuchMethodError = {"": ["_receiver", "_memberName", "_arguments", "_namedArguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_1 = $.StringBuffer_StringBuffer("");
  t1.i_2 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_2, t2.length); t1.i_2 = $.add(t1.i_2, 1)) {
    if ($.gtB(t1.i_2, 0)) {
      t3 = t1.sb_1;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor$JSArray(t3);
    t5 = t1.i_2;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t2.length)
      throw $.ioore(t5);
    t4.add$1(t3, $.Error_safeToString(t2[t5]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.getInterceptor$JSArray(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  t3 = t1.sb_1;
  actualParameters = $.getInterceptor(t3).toString$0(t3);
  t1.sb_1 = $.StringBuffer_StringBuffer("");
  for (i = 0; i < t2.length; ++i) {
    if (i > 0) {
      t3 = t1.sb_1;
      $.getInterceptor$JSArray(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor$JSArray(t3);
    if (i >= t2.length)
      throw $.ioore(i);
    t4.add$1(t3, t2[i]);
  }
  t1 = t1.sb_1;
  formalParameters = $.getInterceptor(t1).toString$0(t1);
  t1 = this._memberName;
  return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_1 = $.StringBuffer_StringBuffer("");
      t1.i_2 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_2, $.getInterceptor$JSStringJSArray(t2).get$length(t2)); t1.i_2 = $.add(t1.i_2, 1)) {
          if ($.gtB(t1.i_2, 0)) {
            t3 = t1.sb_1;
            $.getInterceptor$JSArray(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_1;
          $.getInterceptor$JSArray(t3).add$1(t3, $.Error_safeToString($.index(t2, t1.i_2)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.getInterceptor$JSArray(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, t3, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_1) + "]";
      else {
        t3 = t1.sb_1;
        actualParameters = $.getInterceptor(t3).toString$0(t3);
        t1.sb_1 = $.StringBuffer_StringBuffer("");
        for (i = 0; $.ltB(i, $.getInterceptor$JSStringJSArray(t2).get$length(t2)); ++i) {
          if (i > 0) {
            t3 = t1.sb_1;
            $.getInterceptor$JSArray(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_1;
          $.getInterceptor$JSArray(t3).add$1(t3, $.index(t2, i));
        }
        t1 = t1.sb_1;
        formalParameters = $.getInterceptor(t1).toString$0(t1);
        t1 = this._memberName;
        return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
      }
  }
}
};

$$.UnsupportedError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  return "Unsupported operation: " + $.S(this.get$message());
}
};

$$.UnimplementedError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
}
};

$$.StateError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return "Bad state: " + this.message;
}
};

$$.StackOverflowError = {
 "super": "Object",
 toString$0: function() {
  return "Stack Overflow";
}
};

$$._ExceptionImplementation = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (t1 == null)
    return "Exception";
  return "Exception: " + $.S(t1);
}
};

$$.FormatException = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return "FormatException: " + $.S(this.message);
}
};

$$.IllegalJSRegExpException = {"": ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
}
};

$$.RuntimeError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return "RuntimeError: " + this.message;
}
};

$$._HashMapImpl = {"": ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  hash = (t1 & this._keys.length - 1) >>> 0;
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC7)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    if (hash !== (hash | 0))
      return this._probeForAdding$1$bailout(2, key, insertionIndex, hash, numberOfProbes0);
  }
},
 _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env1;
      key = env0;
      break;
    case 2:
      numberOfProbes0 = env3;
      hash = env2;
      insertionIndex = env1;
      key = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (key == null)
        throw $.$$throw($.ArgumentError$(null));
      t1 = $.getInterceptor(key).get$hashCode(key);
    case 1:
      state0 = 0;
      hash = $.and(t1, this._keys.length - 1);
      numberOfProbes = 1;
      insertionIndex = -1;
    case 2:
      var t1, key, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
              t1 = this._keys;
              if (hash !== (hash | 0))
                throw $.iae(hash);
              if (hash < 0 || hash >= t1.length)
                throw $.ioore(hash);
              existingKey = t1[hash];
              if (existingKey == null) {
                if (insertionIndex < 0)
                  return hash;
                return insertionIndex;
              } else if ($.eqB(existingKey, key))
                return hash;
              else if (insertionIndex < 0 && existingKey === $.CTC7)
                insertionIndex = hash;
              numberOfProbes0 = numberOfProbes + 1;
              hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
            case 2:
              state0 = 0;
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  hash = $.and($.getInterceptor(key).get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, t1, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, capacity, numberOfFreeOrDeleted, t1;
  newNumberOfEntries = $.add(this._numberOfEntries, 1);
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  capacity = this._keys.length;
  if (typeof newNumberOfEntries !== 'number')
    throw $.iae(newNumberOfEntries);
  numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity, oldKeys, oldValues, i, key, value, newIndex, t1;
  capacity = this._keys.length;
  this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
  oldKeys = this._keys;
  oldValues = this._values;
  this._keys = $.List_List(newCapacity);
  this._values = $.List_List(newCapacity);
  for (i = 0; i < capacity; ++i) {
    if (i >= oldKeys.length)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CTC7)
      continue;
    if (i >= oldValues.length)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    t1 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t1.length)
      throw $.ioore(newIndex);
    t1[newIndex] = key;
    t1 = this._values;
    if (newIndex >= t1.length)
      throw $.ioore(newIndex);
    t1[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  var t1, length$, t2, t3, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = t1.length;
  for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 operator$indexSet$2: function(key, value) {
  var index, t1;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CTC7)
    this._numberOfEntries = $.add(this._numberOfEntries, 1);
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index, t1;
  index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 get$isEmpty: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$, i, t1, key;
  length$ = this._keys.length;
  for (i = 0; i < length$; ++i) {
    t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    key = t1[i];
    if (!(key == null) && !(key === $.CTC7)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  this._keys = $.List_List(8);
  this._values = $.List_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {
 "super": "Object"
};

$$._KeyValuePair = {"": ["key?", "value="],
 "super": "Object"
};

$$._LinkedHashMapImpl = {"": ["_list", "_map"],
 "super": "Object",
 operator$indexSet$2: function(key, value) {
  if (this._map.containsKey$1(key) === true)
    $.index(this._map, key).get$element().set$value(value);
  else {
    this._list.addLast$1($._KeyValuePair$(key, value));
    $.indexSet(this._map, key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.index(this._map, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 forEach$1: function(f) {
  this._list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  var t1 = this._map;
  return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 clear$0: function() {
  var t1 = this._map;
  $.getInterceptor$JSArray(t1).clear$0(t1);
  this._list.clear$0();
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  this._map = $.HashMap_HashMap();
  this._list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.Object = {
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$.DoubleLinkedQueueEntry = {"": ["_previous=", "_next=", "_element?"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"": ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"": ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length_anon(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
  }
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"": ["_sentinel", "_currentEntry"],
 "super": "Object",
 get$hasNext: function() {
  var t1, t2;
  t1 = this._currentEntry.get$_next();
  t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$._StringBufferImpl = {"": ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return $.eq(this._length, 0);
},
 add$1: function(obj) {
  var str, t1, t3;
  str = $.getInterceptor(obj).toString$0(obj);
  if (str == null || $.getInterceptor$JSStringJSArray(str).get$isEmpty(str) === true)
    return this;
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, str);
  t1 = this._length;
  if (typeof t1 !== 'number')
    return this.add$1$bailout(1, str, t1);
  t3 = $.getInterceptor$JSStringJSArray(str).get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t3, t1);
  this._length = t1 + t3;
  return this;
},
 add$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      str = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      str = $.getInterceptor(obj).toString$0(obj);
      if (str == null || $.getInterceptor$JSStringJSArray(str).get$isEmpty(str) === true)
        return this;
      t1 = this._buffer;
      $.getInterceptor$JSArray(t1).add$1(t1, str);
      t1 = this._length;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor$JSStringJSArray(str).get$length(str);
    case 2:
      var str, t1, t3;
      state0 = 0;
      this._length = $.add(t1, t3);
      return this;
  }
},
 clear$0: function() {
  this._buffer = $.List_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  var t1, result;
  t1 = this._buffer;
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
    return "";
  t1 = this._buffer;
  if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1))
    return $.index(this._buffer, 0);
  result = $.stringJoinUnchecked($.Strings__toJsStringArray(this._buffer), "");
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).clear$0(t1);
  t1 = this._buffer;
  $.getInterceptor$JSArray(t1).add$1(t1, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ObjectInterceptor = {
 "super": "Object",
 truncate$0: function(receiver) { return receiver.truncate$0(); },
 ceil$0: function(receiver) { return receiver.ceil$0(); },
 charCodeAt$1: function(receiver, a0) { return receiver.charCodeAt$1(a0); },
 floor$0: function(receiver) { return receiver.floor$0(); },
 substring$1: function(receiver, a0) { return receiver.substring$1(a0); },
 replaceAll$2: function(receiver, a0, a1) { return receiver.replaceAll$2(a0, a1); },
 get$isNaN: function(receiver) { return receiver.get$isNaN(); },
 add$1: function(receiver, a0) { return receiver.add$1(a0); },
 get$hashCode: function(receiver) { return receiver.get$hashCode(); },
 set$length: function(receiver) { return receiver.set$length(); },
 get$isInfinite: function(receiver) { return receiver.get$isInfinite(); },
 clear$0: function(receiver) { return receiver.clear$0(); },
 endsWith$1: function(receiver, a0) { return receiver.endsWith$1(a0); },
 toString$0: function(receiver) { return receiver.toString$0(); },
 forEach$1: function(receiver, a0) { return receiver.forEach$1(a0); },
 get$isEmpty: function(receiver) { return receiver.get$isEmpty(); },
 abs$0: function(receiver) { return receiver.abs$0(); },
 addLast$1: function(receiver, a0) { return receiver.addLast$1(a0); },
 iterator$0: function(receiver) { return receiver.iterator$0(); },
 split$1: function(receiver, a0) { return receiver.split$1(a0); },
 removeLast$0: function(receiver) { return receiver.removeLast$0(); },
 toInt$0: function(receiver) { return receiver.toInt$0(); },
 get$isNegative: function(receiver) { return receiver.get$isNegative(); },
 get$length: function(receiver) { return receiver.get$length(); }
};

$$.JSFunction = {
 "super": "Object",
 toString$0: function(receiver) {
  return "Closure";
}
};

$$.JSBool = {
 "super": "Object",
 toString$0: function(receiver) {
  return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver ? 519018 : 218159;
},
 is$bool: true
};

$$.JSNull = {
 "super": "Object",
 toString$0: function(receiver) {
  return "null";
},
 get$hashCode: function(receiver) {
  return 0;
}
};

$$.JSArray = {
 "super": "Object",
 add$1: function(receiver, value) {
  $.checkGrowable(receiver, "add");
  receiver.push(value);
},
 removeLast$0: function(receiver) {
  $.checkGrowable(receiver, "removeLast");
  if (receiver.length === 0)
    throw $.$$throw($.RangeError$value(-1));
  return receiver.pop();
},
 addLast$1: function(receiver, value) {
  $.checkGrowable(receiver, "addLast");
  receiver.push(value);
},
 clear$0: function(receiver) {
  this.set$length(receiver, 0);
},
 forEach$1: function(receiver, f) {
  return $.Collections_forEach(receiver, f);
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return $.Collections_collectionToString(receiver);
},
 iterator$0: function(receiver) {
  return $.ListIterator$(receiver);
},
 get$hashCode: function(receiver) {
  return $.Primitives_objectHashCode(receiver);
},
 get$length: function(receiver) {
  return receiver.length;
},
 set$length: function(receiver, newLength) {
  if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
    throw $.$$throw($.ArgumentError$(newLength));
  if (newLength < 0)
    throw $.$$throw($.RangeError$value(newLength));
  $.checkGrowable(receiver, "set length");
  receiver.length = newLength;
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.JSNumber = {
 "super": "Object",
 get$isNegative: function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
},
 get$isNaN: function(receiver) {
  return isNaN(receiver);
},
 abs$0: function(receiver) {
  return Math.abs(receiver);
},
 toInt$0: function(receiver) {
  var truncated;
  if (this.get$isNaN(receiver) === true)
    throw $.$$throw($.FormatException$("NaN"));
  if (this.get$isInfinite(receiver) === true)
    throw $.$$throw($.FormatException$("Infinity"));
  truncated = this.truncate$0(receiver);
  return truncated == -0.0 ? 0 : truncated;
},
 ceil$0: function(receiver) {
  return Math.ceil(receiver);
},
 floor$0: function(receiver) {
  return Math.floor(receiver);
},
 get$isInfinite: function(receiver) {
  return receiver == Infinity || receiver == -Infinity;
},
 truncate$0: function(receiver) {
  return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
},
 toString$0: function(receiver) {
  if (receiver === 0 && (1 / receiver) < 0)
    return "-0.0";
  else
    return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver & 536870911;
}
};

$$.JSInt = {
 "super": "JSNumber"
};

$$.JSDouble = {
 "super": "JSNumber"
};

$$.JSString = {
 "super": "Object",
 charCodeAt$1: function(receiver, index) {
  if (index < 0)
    throw $.$$throw($.RangeError$value(index));
  if (index >= receiver.length)
    throw $.$$throw($.RangeError$value(index));
  return receiver.charCodeAt(index);
},
 endsWith$1: function(receiver, other) {
  var otherLength, t1;
  $.checkString(other);
  otherLength = other.length;
  t1 = receiver.length;
  if (otherLength > t1)
    return false;
  return other === this.substring$1(receiver, t1 - otherLength);
},
 replaceAll$2: function(receiver, from, to) {
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
},
 split$1: function(receiver, pattern) {
  $.checkNull(pattern);
  return receiver.split(pattern);
},
 substring$2: function(receiver, startIndex, endIndex) {
  $.checkNum(startIndex);
  if (endIndex == null)
    endIndex = receiver.length;
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, receiver.length))
    throw $.$$throw($.RangeError$value(endIndex));
  return receiver.substring(startIndex, endIndex);
},
 substring$1: function($receiver,startIndex) {
  return this.substring$2($receiver,startIndex,null)
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return receiver;
},
 get$hashCode: function(receiver) {
  var hash, i, hash0, hash1;
  for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
},
 get$length: function(receiver) {
  return receiver.length;
},
 is$String: true
};

$$.Spirodraw = {"": ["doc", "RUnits", "rUnits", "dUnits", "R", "r", "d", "fixedRadiusSlider", "wheelRadiusSlider", "penRadiusSlider", "penWidthSlider?", "speedSlider?", "inOrOut", "numTurns", "mainDiv", "lastX", "lastY", "height=", "width=", "xc", "yc", "maxTurns?", "frontCanvas", "backCanvas", "front", "back?", "paletteElement", "colorPicker", "penColor!", "penWidth!", "rad=", "stepSize!", "animationEnabled", "numPoints?", "speed=", "run!"],
 "super": "Object",
 go$0: function() {
  this.onResize$0();
},
 onResize$0: function() {
  this.height = $.window().get$innerHeight();
  this.width = $.sub($.window().get$innerWidth(), 270);
  this.yc = $.tdiv(this.height, 2);
  this.xc = $.tdiv(this.width, 2);
  var t1 = this.height;
  this.frontCanvas.set$height(t1);
  t1 = this.width;
  this.frontCanvas.set$width(t1);
  t1 = this.height;
  this.backCanvas.set$height(t1);
  t1 = this.width;
  this.backCanvas.set$width(t1);
  this.stop$0();
  this.back.clearRect$4(0, 0, this.width, this.height);
  this.refresh$0();
},
 initControlPanel$0: function() {
  this.inOrOut.get$on().get$change().add$2(new $.Spirodraw_initControlPanel_anon(this), true);
  this.fixedRadiusSlider.get$on().get$change().add$2(new $.Spirodraw_initControlPanel_anon0(this), true);
  this.wheelRadiusSlider.get$on().get$change().add$2(new $.Spirodraw_initControlPanel_anon1(this), true);
  this.speedSlider.get$on().get$change().add$2(new $.Spirodraw_initControlPanel_anon2(this), true);
  this.penRadiusSlider.get$on().get$change().add$2(new $.Spirodraw_initControlPanel_anon3(this), true);
  this.penWidthSlider.get$on().get$change().add$2(new $.Spirodraw_initControlPanel_anon4(this), true);
  this.colorPicker = $.ColorPicker$(this.paletteElement);
  this.colorPicker.addListener$1(new $.Spirodraw_initControlPanel_anon5(this));
  this.doc.query$1("#start").get$on().get$click().add$2(new $.Spirodraw_initControlPanel_anon6(this), true);
  this.doc.query$1("#stop").get$on().get$click().add$2(new $.Spirodraw_initControlPanel_anon7(this), true);
  this.doc.query$1("#clear").get$on().get$click().add$2(new $.Spirodraw_initControlPanel_anon8(this), true);
  this.doc.query$1("#lucky").get$on().get$click().add$2(new $.Spirodraw_initControlPanel_anon9(this), true);
},
 refresh$0: function() {
  var pixelsPerUnit, t1, t2, t3, t4;
  this.stop$0();
  this.lastY = 0;
  this.lastX = 0;
  pixelsPerUnit = $.min(this.height, this.width) / 40;
  t1 = this.fixedRadiusSlider.get$valueAsNumber();
  this.RUnits = $.getInterceptor$JSNumber(t1).toInt$0(t1);
  this.R = $.mul(this.RUnits, pixelsPerUnit);
  t2 = this.wheelRadiusSlider.get$valueAsNumber();
  this.rUnits = $.getInterceptor$JSNumber(t2).toInt$0(t2);
  this.r = $.mul($.div($.mul(this.rUnits, this.R), this.RUnits), $.int_parse(this.inOrOut.get$value()));
  t3 = this.penRadiusSlider.get$valueAsNumber();
  this.dUnits = $.getInterceptor$JSNumber(t3).toInt$0(t3);
  this.d = $.div($.mul(this.dUnits, this.R), this.RUnits);
  this.numPoints = this.calcNumPoints$0();
  this.maxTurns = this.calcTurns$0();
  this.speed = this.speedSlider.get$valueAsNumber();
  this.stepSize = $.div($.mul($.div(this.speed, 100), this.maxTurns), this.numPoints);
  t4 = "0 / " + $.S(this.maxTurns);
  this.numTurns.set$text(t4);
  t4 = this.penWidthSlider.get$valueAsNumber();
  this.penWidth = $.getInterceptor$JSNumber(t4).toInt$0(t4);
  this.drawFrame$1(0);
},
 calcNumPoints$0: function() {
  var gcf_, n, d_;
  if ($.eqB(this.dUnits, 0) || $.eqB(this.rUnits, 0))
    return 2;
  gcf_ = $.gcf(this.RUnits, this.rUnits);
  n = $.tdiv(this.RUnits, gcf_);
  d_ = $.tdiv(this.rUnits, gcf_);
  if ($.eqB($.mod(n, 2), 1))
    return n;
  else if ($.eqB($.mod(d_, 2), 1))
    return n;
  else
    return $.tdiv(n, 2);
},
 drawFrame$1: function(theta) {
  if (this.animationEnabled) {
    this.front.clearRect$4(0, 0, this.width, this.height);
    this.front.drawImage$3(this.backCanvas, 0, 0);
    this.drawFixed$0();
  }
  this.drawWheel$1(theta);
},
 animate$1: function(time) {
  var t1, t3, t5, t7, t9;
  if (this.run === true) {
    t1 = this.rad;
    if (typeof t1 !== 'number')
      return this.animate$1$bailout(1, t1);
    t3 = this.maxTurns;
    if (typeof t3 !== 'number')
      return this.animate$1$bailout(2, t3, t1);
    t5 = $.Spirodraw_PI2;
    if (typeof t5 !== 'number')
      return this.animate$1$bailout(3, t3, t5, t1);
    t1 = t1 <= t3 * t5;
  } else
    t1 = false;
  if (t1) {
    t1 = this.rad;
    if (typeof t1 !== 'number')
      return this.animate$1$bailout(4, t1);
    t3 = this.stepSize;
    if (typeof t3 !== 'number')
      return this.animate$1$bailout(5, t1, t3);
    this.rad = t1 + t3;
    this.drawFrame$1(this.rad);
    t5 = this.rad;
    if (typeof t5 !== 'number')
      return this.animate$1$bailout(6, t5);
    t7 = $.Spirodraw_PI2;
    if (typeof t7 !== 'number')
      return this.animate$1$bailout(7, t5, t7);
    t9 = $.S($.CTC1.toInt$0(t5 / t7)) + "/" + $.S(this.maxTurns);
    this.numTurns.set$text(t9);
    $.window().requestAnimationFrame$1(this.get$animate());
  } else
    this.stop$0();
},
 animate$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
    case 3:
      t1 = env2;
      t5 = env1;
      t3 = env0;
      break;
    case 4:
      t1 = env0;
      break;
    case 5:
      t3 = env1;
      t1 = env0;
      break;
    case 6:
      t5 = env0;
      break;
    case 7:
      t7 = env1;
      t5 = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && this.run === true)
        switch (state0) {
          case 0:
            t1 = this.rad;
          case 1:
            state0 = 0;
            t3 = this.maxTurns;
          case 2:
            state0 = 0;
            t5 = $.Spirodraw_PI2;
          case 3:
            state0 = 0;
            t1 = $.leB(t1, $.mul(t3, t5));
        }
      else
        t1 = false;
    case 4:
    case 5:
    case 6:
    case 7:
      var t1, t3, t5, t7;
      if (state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && t1)
        switch (state0) {
          case 0:
            t1 = this.rad;
          case 4:
            state0 = 0;
            t3 = this.stepSize;
          case 5:
            state0 = 0;
            this.rad = $.add(t1, t3);
            this.drawFrame$1(this.rad);
            t5 = this.rad;
          case 6:
            state0 = 0;
            t7 = $.Spirodraw_PI2;
          case 7:
            state0 = 0;
            t7 = $.div(t5, t7);
            t5 = $.S($.getInterceptor$JSNumber(t7).toInt$0(t7)) + "/" + $.S(this.maxTurns);
            this.numTurns.set$text(t5);
            $.window().requestAnimationFrame$1(this.get$animate());
        }
      else
        this.stop$0();
  }
},
 get$animate: function() { return new $.BoundClosure(this, 'animate$1'); },
 calcTurns$0: function() {
  var t1, ru;
  if ($.eqB(this.dUnits, 0) || $.eqB(this.rUnits, 0))
    return 1;
  t1 = this.rUnits;
  ru = $.getInterceptor$JSNumber(t1).abs$0(t1);
  t1 = $.tdiv(ru, $.gcf($.add(this.RUnits, this.rUnits), ru));
  return $.getInterceptor$JSNumber(t1).toInt$0(t1);
},
 stop$0: function() {
  this.run = false;
  this.front.clearRect$4(0, 0, this.width, this.height);
  this.front.drawImage$3(this.backCanvas, 0, 0);
  this.rad = 0;
},
 clear$0: function() {
  this.stop$0();
  this.back.clearRect$4(0, 0, this.width, this.height);
  this.refresh$0();
},
 lucky$0: function() {
  var rand, t1;
  rand = $.Random_Random(null);
  t1 = $.mul(rand.nextDouble$0(), 9);
  this.wheelRadiusSlider.set$valueAsNumber(t1);
  t1 = $.mul(rand.nextDouble$0(), 9);
  this.penRadiusSlider.set$valueAsNumber(t1);
  t1 = $.mul(rand.nextDouble$0(), 9);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  t1 = 1 + t1;
  this.penWidthSlider.set$valueAsNumber(t1);
  t1 = this.colorPicker.getHexString$1($.mul(rand.nextDouble$0(), 215));
  this.colorPicker.set$selectedColor(t1);
  this.refresh$0();
  this.rad = 0;
  this.run = true;
  $.window().requestAnimationFrame$1(this.get$animate());
},
 drawFixed$0: function() {
  if (this.animationEnabled) {
    this.front.beginPath$0();
    this.front.setLineWidth$1(2);
    this.front.set$strokeStyle("gray");
    this.front.arc$6(this.xc, this.yc, this.R, 0, $.Spirodraw_PI2, true);
    this.front.closePath$0();
    this.front.stroke$0();
  }
},
 drawWheel$1: function(theta) {
  var wx, wy, t1, t2;
  wx = $.add(this.xc, $.mul($.add(this.R, this.r), $.cos(theta)));
  wy = $.sub(this.yc, $.mul($.add(this.R, this.r), $.sin(theta)));
  if (this.animationEnabled)
    if ($.gtB(this.rUnits, 0)) {
      this.front.beginPath$0();
      t1 = this.front;
      t2 = this.r;
      t1.arc$6(wx, wy, $.getInterceptor$JSNumber(t2).abs$0(t2), 0, $.Spirodraw_PI2, true);
      this.front.closePath$0();
      this.front.stroke$0();
      this.front.setLineWidth$1(1);
      this.front.beginPath$0();
      this.front.arc$6(wx, wy, 3, 0, $.Spirodraw_PI2, true);
      this.front.set$fillStyle("black");
      this.front.fill$0();
      this.front.closePath$0();
      this.front.stroke$0();
    }
  this.drawTip$3(wx, wy, theta);
},
 drawTip$3: function(wx, wy, theta) {
  var rot, tx, ty, t1;
  rot = $.eqB(this.r, 0) ? theta : $.div($.mul(theta, $.add(this.R, this.r)), this.r);
  tx = $.add(wx, $.mul(this.d, $.cos(rot)));
  ty = $.sub(wy, $.mul(this.d, $.sin(rot)));
  if (this.animationEnabled) {
    this.front.beginPath$0();
    t1 = this.penColor;
    this.front.set$fillStyle(t1);
    this.front.arc$6(tx, ty, $.add($.div(this.penWidth, 2), 2), 0, $.Spirodraw_PI2, true);
    this.front.fill$0();
    this.front.moveTo$2(wx, wy);
    this.front.set$strokeStyle("black");
    this.front.lineTo$2(tx, ty);
    this.front.closePath$0();
    this.front.stroke$0();
  }
  this.drawSegmentTo$2(tx, ty);
},
 drawSegmentTo$2: function(tx, ty) {
  var t1;
  if ($.gtB(this.lastX, 0)) {
    this.back.beginPath$0();
    t1 = this.penColor;
    this.back.set$strokeStyle(t1);
    this.back.setLineWidth$1(this.penWidth);
    this.back.moveTo$2(this.lastX, this.lastY);
    this.back.lineTo$2(tx, ty);
    this.back.closePath$0();
    this.back.stroke$0();
  }
  this.lastX = tx;
  this.lastY = ty;
},
 Spirodraw$0: function() {
  this.doc = $.window().get$document();
  this.inOrOut = this.doc.query$1("#in_out");
  this.fixedRadiusSlider = this.doc.query$1("#fixed_radius");
  this.wheelRadiusSlider = this.doc.query$1("#wheel_radius");
  this.penRadiusSlider = this.doc.query$1("#pen_radius");
  this.penWidthSlider = this.doc.query$1("#pen_width");
  this.speedSlider = this.doc.query$1("#speed");
  this.numTurns = this.doc.query$1("#num_turns");
  this.mainDiv = this.doc.query$1("#main");
  this.frontCanvas = this.doc.query$1("#canvas");
  this.front = this.frontCanvas.get$context2d();
  this.backCanvas = $.Element_Element$tag("canvas");
  this.back = this.backCanvas.get$context2d();
  this.paletteElement = this.doc.query$1("#palette");
  $.window().get$on().get$resize().add$2(new $.anon(this), true);
  this.initControlPanel$0();
}
};

$$.ColorPicker = {"": ["_listeners", "canvasElement", "_selectedColor", "height?", "width?", "ctx"],
 "super": "Object",
 set$selectedColor: function(color) {
  this._selectedColor = color;
  this.showSelected$0();
  this.fireSelected$0();
},
 onMouseMove$1: function(event$) {
  var x, y, t1;
  x = event$.get$offsetX();
  y = $.sub(event$.get$offsetY(), 40);
  if ($.ltB(y, 0) || $.geB(x, this.width))
    return;
  t1 = this.getHexString$1(this.getColorIndex$2(x, y));
  this.ctx.set$fillStyle(t1);
  this.ctx.fillRect$4(0, 0, $.div(this.width, 2), 30);
},
 onMouseDown$1: function(event$) {
  var x, y;
  event$.get$target();
  event$.set$cancelBubble(true);
  x = event$.get$offsetX();
  y = $.sub(event$.get$offsetY(), 40);
  if ($.ltB(y, 0) || $.geB(x, this.width))
    return;
  this.set$selectedColor(this.getHexString$1(this.getColorIndex$2(x, y)));
},
 addListener$1: function(listener) {
  $.CTC2.add$1(this._listeners, listener);
},
 addHandlers$0: function() {
  var t1 = this.canvasElement;
  t1.get$on().get$mouseMove().add$2(new $.ColorPicker_addHandlers_anon(this), true);
  t1.get$on().get$mouseDown().add$2(new $.ColorPicker_addHandlers_anon0(this), true);
},
 drawPalette$0: function() {
  var i, r, g, b, color, x, y;
  for (i = 0, r = 0; r < 256; r += 51)
    for (g = 0; g < 256; g += 51)
      for (b = 0; b < 256; b += 51) {
        color = this.getHexString$1(i);
        this.ctx.set$fillStyle(color);
        x = 10 * $.mod(i, 18);
        y = 10 * $.tdiv(i, 18) + 40;
        this.ctx.fillRect$4(x + 1, y + 1, 8, 8);
        ++i;
      }
},
 fireSelected$0: function() {
  for (var t1 = $.CTC2.iterator$0(this._listeners); t1.get$hasNext() === true;)
    t1.next$0().call$1(this._selectedColor);
},
 getColorIndex$2: function(x, y) {
  return $.add($.mul($.tdiv(y, 10), 18), $.tdiv(x, 10));
},
 showSelected$0: function() {
  var t1, t2;
  t1 = this._selectedColor;
  this.ctx.set$fillStyle(t1);
  t1 = this.ctx;
  t2 = this.width;
  t1.fillRect$4($.div(t2, 2), 0, $.div(t2, 2), 30);
  this.ctx.set$fillStyle("white");
  this.ctx.fillRect$4(0, 0, $.div(t2, 2), 30);
},
 getHexString$1: function(value) {
  var t1, i, r, g, b, t2;
  t1 = $.getInterceptor$JSNumber(value).floor$0(value);
  i = $.getInterceptor$JSNumber(t1).toInt$0(t1);
  r = $.mod($.tdiv(i, 36), 6);
  g = $.tdiv($.mod(i, 36), 6);
  b = $.mod(i, 6);
  if (r !== (r | 0))
    throw $.iae(r);
  if (r < 0 || r >= $.CTC3.length)
    throw $.ioore(r);
  t1 = "#" + $.S($.CTC3[r]);
  if (g !== (g | 0))
    throw $.iae(g);
  if (g < 0 || g >= $.CTC3.length)
    throw $.ioore(g);
  t2 = t1 + $.S($.CTC3[g]);
  if (b !== (b | 0))
    throw $.iae(b);
  if (b < 0 || b >= $.CTC3.length)
    throw $.ioore(b);
  return t2 + $.S($.CTC3[b]);
},
 ColorPicker$1: function(canvasElement) {
  this.ctx = this.canvasElement.get$context2d();
  this.drawPalette$0();
  this.addHandlers$0();
  this.showSelected$0();
}
};

$$.AbstractWorkerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.AudioContextEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.BatteryManagerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.BodyElementEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$resize: function() {
  return this.operator$index$1("resize");
}
};

$$.DOMApplicationCacheEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.DedicatedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.DocumentEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.ElementEvents = {"": ["_ptr"],
 "super": "Events",
 get$change: function() {
  return this.operator$index$1("change");
},
 get$click: function() {
  return this.operator$index$1("click");
},
 get$mouseDown: function() {
  return this.operator$index$1("mousedown");
},
 get$mouseMove: function() {
  return this.operator$index$1("mousemove");
}
};

$$.EventSourceEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.Events = {"": ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {"": ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._ptr.$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
}
};

$$.FileReaderEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FileWriterEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FrameSetElementEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$resize: function() {
  return this.operator$index$1("resize");
}
};

$$.HttpRequestEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.HttpRequestUploadEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBDatabaseEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBOpenDBRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.IDBRequestEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBTransactionEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBVersionChangeRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.InputElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.LocalWindowEvents = {"": ["_ptr"],
 "super": "Events",
 get$change: function() {
  return this.operator$index$1("change");
},
 get$click: function() {
  return this.operator$index$1("click");
},
 get$mouseDown: function() {
  return this.operator$index$1("mousedown");
},
 get$mouseMove: function() {
  return this.operator$index$1("mousemove");
},
 get$resize: function() {
  return this.operator$index$1("resize");
}
};

$$.MediaElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.MediaStreamEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MessagePortEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.NotificationEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1("click");
}
};

$$.PeerConnection00Events = {"": ["_ptr"],
 "super": "Events"
};

$$.RTCDataChannelEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.RTCPeerConnectionEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.ScriptProcessorNodeEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.SharedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.SpeechRecognitionEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackCueEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.WebSocketEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.WorkerEvents = {"": ["_ptr"],
 "super": "AbstractWorkerEvents"
};

$$.WorkerContextEvents = {"": ["_ptr"],
 "super": "Events"
};

$$._DOMWindowCrossFrame = {"": ["_window"],
 "super": "Object",
 get$top: function() {
  return $._DOMWindowCrossFrame__createSafe(this._window.top);
}
};

$$.FixedSizeListIterator = {"": ["_lib_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 get$hasNext: function() {
  return $.gt(this._lib_length, this._pos);
}
};

$$._VariableSizeListIterator = {
 "super": "Object",
 get$hasNext: function() {
  var t1 = this._array;
  return $.gt($.getInterceptor$JSStringJSArray(t1).get$length(t1), this._pos);
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._pos;
  if (typeof t3 !== 'number')
    return this.next$0$bailout(2, t3, t1);
  this._pos = t3 + 1;
  if (t3 !== (t3 | 0))
    throw $.iae(t3);
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.get$hasNext() !== true)
        throw $.$$throw($.StateError$("No more elements"));
      t1 = this._array;
    case 1:
      state0 = 0;
      t3 = this._pos;
    case 2:
      var t1, t3;
      state0 = 0;
      this._pos = $.add(t3, 1);
      return $.index(t1, t3);
  }
}
};

$$._Random = {
 "super": "Object",
 nextDouble$0: function() {
  return Math.random();
}
};

$$.ElementInstanceEvents = {"": ["_ptr"],
 "super": "Events",
 get$change: function() {
  return this.operator$index$1("change");
},
 get$click: function() {
  return this.operator$index$1("click");
},
 get$mouseDown: function() {
  return this.operator$index$1("mousedown");
},
 get$mouseMove: function() {
  return this.operator$index$1("mousemove");
},
 get$resize: function() {
  return this.operator$index$1("resize");
}
};

$$.invokeClosure_anon = {"": ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"": ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"": ["arg2_5", "closure_4", "arg1_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_4.call$2(this.arg1_3, this.arg2_5);
}
};

$$.anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_0.onResize$0();
}
};

$$.Spirodraw_initControlPanel_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_0.refresh$0();
}
};

$$.Spirodraw_initControlPanel_anon0 = {"": ["this_1"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_1.refresh$0();
}
};

$$.Spirodraw_initControlPanel_anon1 = {"": ["this_2"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_2.refresh$0();
}
};

$$.Spirodraw_initControlPanel_anon2 = {"": ["this_3"],
 "super": "Closure",
 call$1: function(event$) {
  var t1 = this.this_3;
  t1.set$speed(t1.get$speedSlider().get$valueAsNumber());
  t1.set$stepSize($.div($.mul($.div(t1.get$speed(), 100), t1.get$maxTurns()), t1.get$numPoints()));
  return;
}
};

$$.Spirodraw_initControlPanel_anon3 = {"": ["this_4"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_4.refresh$0();
}
};

$$.Spirodraw_initControlPanel_anon4 = {"": ["this_5"],
 "super": "Closure",
 call$1: function(event$) {
  var t1, t2;
  t1 = this.this_5;
  t2 = t1.get$penWidthSlider().get$valueAsNumber();
  t1.set$penWidth($.getInterceptor$JSNumber(t2).toInt$0(t2));
  t1.drawFrame$1(t1.get$rad());
  return;
}
};

$$.Spirodraw_initControlPanel_anon5 = {"": ["this_6"],
 "super": "Closure",
 call$1: function(color) {
  var t1 = this.this_6;
  t1.set$penColor(color);
  t1.drawFrame$1(t1.get$rad());
  return;
}
};

$$.Spirodraw_initControlPanel_anon6 = {"": ["this_7"],
 "super": "Closure",
 call$1: function(event$) {
  var t1 = this.this_7;
  t1.refresh$0();
  t1.set$rad(0);
  t1.set$run(true);
  $.window().requestAnimationFrame$1(t1.get$animate());
  return;
}
};

$$.Spirodraw_initControlPanel_anon7 = {"": ["this_8"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_8.stop$0();
}
};

$$.Spirodraw_initControlPanel_anon8 = {"": ["this_9"],
 "super": "Closure",
 call$1: function(event$) {
  var t1 = this.this_9;
  t1.stop$0();
  t1.get$back().clearRect$4(0, 0, t1.get$width(), t1.get$height());
  t1.refresh$0();
  return;
}
};

$$.Spirodraw_initControlPanel_anon9 = {"": ["this_10"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_10.lucky$0();
}
};

$$.Maps__emitMap_anon = {"": ["box_0", "visiting_3", "result_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_1 !== true) {
    t2 = this.result_2;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t1.first_1 = false;
  t1 = this.result_2;
  t2 = this.visiting_3;
  $.Collections__emitObject(k, t1, t2);
  $.getInterceptor$JSArray(t1).add$1(t1, ": ");
  $.Collections__emitObject(v, t1, t2);
}
};

$$.ColorPicker_addHandlers_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0.onMouseMove$1(e);
}
};

$$.ColorPicker_addHandlers_anon0 = {"": ["this_1"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_1.onMouseDown$1(e);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": ["values_3", "copies_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, t3, length$, i, t2;
  t1 = this.values_3;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout0(1, value, t1);
  t3 = $.getInterceptor$JSStringJSArray(t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  t3.add$1(t1, value);
  t1 = this.copies_2;
  $.getInterceptor$JSArray(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout0: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      value = env0;
      break;
    case 2:
      length$ = env2;
      t1 = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.values_3;
    case 1:
      state0 = 0;
      length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    case 2:
      var t1, value, length$, i, t2;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        t2 = $.index(t1, i);
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      $.getInterceptor$JSArray(t1).add$1(t1, value);
      t1 = this.copies_2;
      $.getInterceptor$JSArray(t1).add$1(t1, null);
      return length$;
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": ["writeSlot_8", "readSlot_7", "findSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, copy0, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$("structured clone of Date"));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_6.call$1(e);
    t1.copy_1 = this.readSlot_7.call$1(slot);
    t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_8.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_6.call$1(e);
    t2 = this.readSlot_7;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_8.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_8;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy0 = t2.call$1(slot);
          if (true === copy0) {
            copy0 = new Array(length$);
            t3.call$2(slot, copy0);
          }
          if (typeof copy0 !== 'object' || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(3, e, t3, elementCopy, i, length$, copy0, slot, t2, copy);
          for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy0[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy0[i] = elementCopy;
          ++i;
          copy = copy0;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(4, e, length$, i, copy);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$("structured clone of other type"));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      length$ = env1;
      e = env0;
      break;
    case 3:
      copy = env8;
      t3 = env7;
      slot = env6;
      copy0 = env5;
      length$ = env4;
      i = env3;
      elementCopy = env2;
      t2 = env1;
      e = env0;
      break;
    case 4:
      copy = env3;
      i = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$("structured clone of Date"));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_6.call$1(e);
        t1.copy_1 = this.readSlot_7.call$1(slot);
        t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_8.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      var t1, slot, t2, e, length$, t3, copy, i, element, elementCopy, copy0, j;
      if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            length$ = $.getInterceptor$JSStringJSArray(e).get$length(e);
          case 2:
            state0 = 0;
            slot = this.findSlot_6.call$1(e);
            t3 = this.readSlot_7;
            copy = t3.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_8.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t2 = this.writeSlot_8;
          case 3:
            if (state0 === 3 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t2.call$2(slot, true);
                  i = 0;
                case 3:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = $.index(e, i);
                          elementCopy = this.call$1(element);
                        case 3:
                          if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy0 = t3.call$1(slot);
                                if (true === copy0) {
                                  copy0 = new Array(length$);
                                  t2.call$2(slot, copy0);
                                }
                              case 3:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy0, j, $.index(e, j));
                                $.indexSet(copy0, i, elementCopy);
                                ++i;
                                copy = copy0;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t2.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t2.call$2(slot, copy);
              i = 0;
            }
          case 4:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$._LinkedHashMapImpl_forEach_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.DoubleLinkedQueue_length_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$.NoSuchMethodError_toString_anon = {"": ["box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2;
  t1 = this.box_0;
  if ($.gtB(t1.i_2, 0)) {
    t2 = t1.sb_1;
    $.getInterceptor$JSArray(t2).add$1(t2, ", ");
  }
  t2 = t1.sb_1;
  $.getInterceptor$JSArray(t2).add$1(t2, key);
  t2 = t1.sb_1;
  $.getInterceptor$JSArray(t2).add$1(t2, ": ");
  t2 = t1.sb_1;
  $.getInterceptor$JSArray(t2).add$1(t2, $.Error_safeToString(value));
  t1.i_2 = $.add(t1.i_2, 1);
}
};

$$.Closure = {
 "super": "Object",
 toString$0: function() {
  return "Closure";
}
};

$$.BoundClosure = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
['self', 'target'],
'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'string' && (typeof strings !== 'object' || strings === null || strings.constructor !== Array && !strings.is$JavaScriptIndexingBehavior()))
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $.List_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.mod = function(a, b) {
  var result;
  if ($.checkNumbers(a, b)) {
    result = a % b;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (b < 0)
      return result - b;
    else
      return result + b;
  }
  return a.operator$mod$1(b);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.CTC.truncate$0(a / b);
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.CTC.truncate$0(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.getInterceptor$JSStringJSArray(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.getInterceptor$JSStringJSArray(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, "indexed set");
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CTC0;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  var t1 = this.dartException;
  return $.getInterceptor(t1).toString$0(t1);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.CTC5.endsWith$1(message, "is null") === true || $.CTC5.endsWith$1(message, "is undefined") === true || $.CTC5.endsWith$1(message, "is null or undefined") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" is not a function") === -1)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === 'string' ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return new $.invokeClosure_anon(closure).call$0();
  else if ($.eqB(numberOfArguments, 1))
    return new $.invokeClosure_anon0(closure, arg1).call$0();
  else if ($.eqB(numberOfArguments, 2))
    return new $.invokeClosure_anon1(arg2, closure, arg1).call$0();
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $, arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.CTC2.iterator$0(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$.DOMApplicationCacheEvents$ = function(_ptr) {
  return new $.DOMApplicationCacheEvents(_ptr);
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, method, i, entry, proto;
  tag = $.getTypeNameOf(obj);
  method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if (entry.get$_set()[tag]) {
        method = methods[entry.get$_tag()];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods["Object"];
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CTC8)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = $.CTC5.split$1(tags, "|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    $.CTC2.add$1(result, $.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, t2, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (multiLine === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "m");
  }
  if (ignoreCase === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, t1, i;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer_StringBuffer("");
      length$ = receiver.length;
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        t1.add$1(result, receiver[i]);
        t1.add$1(result, to);
      }
      return t1.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.LocalWindowEvents$ = function(_ptr) {
  return new $.LocalWindowEvents(_ptr);
};

$.Random_Random = function(seed) {
  return $.CTC4;
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$.ElementInstanceEvents$ = function(_ptr) {
  return new $.ElementInstanceEvents(_ptr);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$.main = function() {
  $.Spirodraw$().go$0();
};

$.gcf = function(n, d) {
  var i;
  if (typeof n !== 'number')
    return $.gcf$bailout(1, n, d);
  if (typeof d !== 'number')
    return $.gcf$bailout(1, n, d);
  if (n === d)
    return n;
  for (i = $.tdiv($.max(n, d), 2); i > 1; --i)
    if ($.mod(n, i) === 0 && $.mod(d, i) === 0)
      return i;
  return 1;
};

$.window = function() {
  return window;
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  return new $.MediaStreamTrackListEvents(_ptr);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(values, copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t3, t2, t1).call$1(value);
  t4.call$0();
  return copy;
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.PeerConnection00Events$ = function(_ptr) {
  return new $.PeerConnection00Events(_ptr);
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.min = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.CTC1.get$isNegative(b) === true || $.CTC1.get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return a + b;
        if ($.CTC1.get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.CTC.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.sin = function(x) {
  return Math.sin($.checkNum(x));
};

$.cos = function(x) {
  return Math.cos($.checkNum(x));
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.RTCDataChannelEvents$ = function(_ptr) {
  return new $.RTCDataChannelEvents(_ptr);
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$.RTCPeerConnectionEvents$ = function(_ptr) {
  return new $.RTCPeerConnectionEvents(_ptr);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.FrameSetElementEvents$ = function(_ptr) {
  return new $.FrameSetElementEvents(_ptr);
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.Spirodraw$ = function() {
  var t1 = new $.Spirodraw(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "red", null, 0, null, true, null, null, null);
  t1.Spirodraw$0();
  return t1;
};

$.ColorPicker$ = function(canvasElement) {
  var t1 = new $.ColorPicker([], canvasElement, "red", 160, 180, null);
  t1.ColorPicker$1(canvasElement);
  return t1;
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === 'string') {
    t1 = $.CTC5.replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return $.Primitives_objectToString(object);
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$.List_List = function(length$) {
  return $.Primitives_newList(length$);
};

$.ScriptProcessorNodeEvents$ = function(_ptr) {
  return new $.ScriptProcessorNodeEvents(_ptr);
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.IDBDatabaseEvents$ = function(_ptr) {
  return new $.IDBDatabaseEvents(_ptr);
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_parseInt = function(string) {
  var match, base, result;
  $.checkString(string);
  match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  base = !($.index(match, 1) == null) ? 16 : 10;
  result = parseInt(string, base);
  if ($.CTC.get$isNaN(result) === true)
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled, t1;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  t1 = $.getInterceptor$JSString(name$);
  return t1.charCodeAt$1(name$, 0) === 36 ? t1.substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer("");
  $.Maps__emitMap(m, result, $.List_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_1 = true;
  $.getInterceptor$JSArray(m).forEach$1(m, new $.Maps__emitMap_anon(t1, visiting, result));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.CTC2.iterator$0(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  t2 = $.getInterceptor$JSArray(result);
  t2.add$1(result, isList ? "[" : "{");
  for (t3 = $.getInterceptor$JSArray(c).iterator$0(c), first = true; t3.get$hasNext() === true; first = false) {
    t4 = t3.next$0();
    if (!first)
      t2.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t2.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer("");
  $.Collections__emitCollection(c, result, $.List_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(c).iterator$0(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}");
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor$JSArray(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor$JSArray(result).add$1(result, o);
};

$.IDBOpenDBRequestEvents$ = function(_ptr) {
  return new $.IDBOpenDBRequestEvents(_ptr);
};

$.IDBRequestEvents$ = function(_ptr) {
  return new $.IDBRequestEvents(_ptr);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator($.getInterceptor$JSStringJSArray(array).get$length(array), array, 0);
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.IDBTransactionEvents$ = function(_ptr) {
  return new $.IDBTransactionEvents(_ptr);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$.IDBVersionChangeRequestEvents$ = function(_ptr) {
  return new $.IDBVersionChangeRequestEvents(_ptr);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.RegExp_RegExp = function(pattern, ignoreCase, multiLine) {
  return $.JSSyntaxRegExp$(pattern, ignoreCase, multiLine);
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env1;
      strings = env0;
      break;
    case 3:
      length$ = env2;
      array = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      length$ = $.getInterceptor$JSStringJSArray(strings).get$length(strings);
    case 2:
      state0 = 0;
    case 3:
      var strings, length$, i, string, array;
      if (state0 === 0 && $.isJsArray(strings)) {
        for (i = 0; $.ltB(i, length$); ++i) {
          string = $.index(strings, i);
          if (!(typeof string === 'string'))
            throw $.$$throw($.ArgumentError$(string));
        }
        array = strings;
      } else
        switch (state0) {
          case 0:
            array = $.List_List(length$);
          case 3:
            state0 = 0;
            for (i = 0; $.ltB(i, length$); ++i) {
              string = $.index(strings, i);
              if (!(typeof string === 'string'))
                throw $.$$throw($.ArgumentError$(string));
              $.indexSet(array, i, string);
            }
        }
      return array;
  }
};

$.gcf$bailout = function(state0, n, d) {
  var i;
  if ($.eqB(n, d))
    return n;
  for (i = $.tdiv($.max(n, d), 2); i > 1; --i)
    if ($.eqB($.mod(n, i), 0) && $.eqB($.mod(d, i), 0))
      return i;
  return 1;
};

$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
Isolate.$finishClasses($$);
$$ = {};
$.CTC1 = new Isolate.$isolateProperties.JSDouble();
$.CTC5 = new Isolate.$isolateProperties.JSString();
$.CTC9 = new Isolate.$isolateProperties.Returns("num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView");
$.CTC0 = new Isolate.$isolateProperties.NullThrownError();
$.CTC10 = new Isolate.$isolateProperties.Returns("=List|=Object|num|String");
$.CTC11 = new Isolate.$isolateProperties.Creates("=List|=Object|num|String");
$.CTC7 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC12 = new Isolate.$isolateProperties.Creates("num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView");
$.CTC8 = new Isolate.$isolateProperties.Object();
$.CTC4 = new Isolate.$isolateProperties._Random();
$.CTC13 = new Isolate.$isolateProperties.Creates("IDBRequest");
$.CTC14 = new Isolate.$isolateProperties.Returns("IDBRequest");
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC3 = Isolate.makeConstantList(["00", "33", "66", "99", "CC", "FF"]);
$.CTC15 = new Isolate.$isolateProperties.Creates("Null");
$.CTC2 = new Isolate.$isolateProperties.JSArray();
$.CTC = new Isolate.$isolateProperties.JSNumber();
$.CTC6 = new Isolate.$isolateProperties.JSInt();
$.ColorPicker_BH = 10;
$.ColorPicker_BW = 10;
$.ColorPicker_BP = 1;
$.PI = 3.141592653589793;
$._serializedScriptValue = "num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView";
$._annotation_Creates_SerializedScriptValue = Isolate.$isolateProperties.CTC12;
$._annotation_Returns_SerializedScriptValue = Isolate.$isolateProperties.CTC9;
$._idbKey = "=List|=Object|num|String";
$._getTypeNameOf = null;
$._annotation_Creates_IDBKey = Isolate.$isolateProperties.CTC11;
$._annotation_Returns_IDBKey = Isolate.$isolateProperties.CTC10;
$.Spirodraw_PI2 = 6.283185307179586;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.Primitives_hashCodeSeed = 0;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CTC7;
$.ColorPicker_hexValues = Isolate.$isolateProperties.CTC3;
$.ColorPicker_COLS = 18;
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == 'number') return $.JSNumber.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == 'string') return $.JSString.prototype;
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  if (typeof receiver == 'number') return $.JSNumber.prototype;
  if (typeof receiver == 'number' && Math.floor(receiver) == receiver) return $.JSInt.prototype;
  if (typeof receiver == 'number') return $.JSDouble.prototype;
  if (receiver == null) return $.JSNull.prototype;
  if (typeof receiver == 'function') return $.JSFunction.prototype;
  if (typeof receiver == 'boolean') return $.JSBool.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver != null && receiver.constructor == Array) return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", false, false);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''] || [];
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method !== '') {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$List: function() { return false; },
 is$File: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Blob: function() { return false; },
 is$ImageData: function() { return false; },
 is$Collection: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$Map: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$_FileList: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$Element: function() { return false; }
});

$.$defineNativeClass('AbstractWorker', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.AbstractWorkerEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAnchorElement', {"": ["target?"],
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAppletElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', {"": ["target?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', {
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"": ["value="]
});

$.$defineNativeClass('AudioBuffer', {"": ["length?"]
});

$.$defineNativeClass('AudioContext', {
 get$on: function() {
  return $.AudioContextEvents$(this);
}
});

$.$defineNativeClass('AudioParam', {"": ["value="]
});

$.$defineNativeClass('HTMLBRElement', {
 clear$0: function() { return this.clear.call$0(); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseElement', {"": ["target?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('BatteryManager', {
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Blob', {
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {
 get$on: function() {
  return $.BodyElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitCSSMatrix', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSStyleDeclaration', {"": ["length?"],
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : "";
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 get$clear: function() {
  return this.getPropertyValue$1("clear");
},
 clear$0: function() { return this.get$clear().call$0(); },
 get$height: function() {
  return this.getPropertyValue$1("height");
},
 set$height: function(value) {
  this.setProperty$3("height", value, "");
},
 get$left: function() {
  return this.getPropertyValue$1("left");
},
 get$resize: function() {
  return this.getPropertyValue$1("resize");
},
 get$top: function() {
  return this.getPropertyValue$1("top");
},
 get$width: function() {
  return this.getPropertyValue$1("width");
},
 set$width: function(value) {
  this.setProperty$3("width", value, "");
}
});

$.$defineNativeClass('HTMLCanvasElement', {"": ["height=", "width="],
 getContext$1: function(contextId) {
  return this.getContext(contextId);
},
 get$context2d: function() {
  return this.getContext$1("2d");
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('CanvasRenderingContext2D', {"": ["fillStyle!", "strokeStyle!"],
 arc$6: function(x, y, radius, startAngle, endAngle, anticlockwise) {
  return this.arc(x,y,radius,startAngle,endAngle,anticlockwise);
},
 beginPath$0: function() {
  return this.beginPath();
},
 clearRect$4: function(x, y, width, height) {
  return this.clearRect(x,y,width,height);
},
 closePath$0: function() {
  return this.closePath();
},
 drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
},
 drawImage$3: function(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y);
},
 fill$0: function() {
  return this.fill();
},
 fillRect$4: function(x, y, width, height) {
  return this.fillRect(x,y,width,height);
},
 lineTo$2: function(x, y) {
  return this.lineTo(x,y);
},
 moveTo$2: function(x, y) {
  return this.moveTo(x,y);
},
 setLineWidth$1: function(width) {
  return this.setLineWidth(width);
},
 stroke$0: function() {
  return this.stroke();
}
});

$.$defineNativeClass('CharacterData', {"": ["length?"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {"": ["height?", "left?", "top?", "width?"]
});

Console = (typeof console == 'undefined' ? {} : console);
$.$defineNativeClass('HTMLContentElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Coordinates', {"": ["speed?"]
});

$.$defineNativeClass('HTMLDListElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', {
 get$on: function() {
  return $.DOMApplicationCacheEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('MimeTypeArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Plugin', {"": ["length?"]
});

$.$defineNativeClass('PluginArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"": ["value="]
});

$.$defineNativeClass('DOMTokenList', {"": ["length?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLDataListElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('DataTransferItemList', {"": ["length?"],
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DedicatedWorkerContext', {
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('HTMLDetailsElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDirectoryElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDivElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Document', {
 get$on: function() {
  return $.DocumentEvents$(this);
},
 $dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 query$1: function(selectors) {
  if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", false, false).hasMatch$1(selectors) === true)
    return this.$dom_getElementById$1($.CTC5.substring$1(selectors, 1));
  return this.$dom_querySelector$1(selectors);
}
});

$.$defineNativeClass('DocumentFragment', {
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$parent: function() {
  return;
},
 click$0: function() {
},
 get$click: function() { return new $.BoundClosure0(this, 'click$0'); },
 get$on: function() {
  return $.ElementEvents$(this);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
}
});

$.$defineNativeClass('DocumentType', {
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('Element', {
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.ElementEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 click$0: function() {
  return this.click();
},
 get$click: function() { return new $.BoundClosure0(this, 'click$0'); },
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Entry', {
 moveTo$4: function(parent, name, successCallback, errorCallback) {
  return this.moveTo(parent,name,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
},
 moveTo$2: function(parent$,name$) {
  return this.moveTo(parent$,name$);
}
});

$.$defineNativeClass('EntrySync', {
 moveTo$2: function(parent, name) {
  return this.moveTo(parent,name);
},
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('Event', {"": ["cancelBubble!"],
 get$target: function() {
  return $._convertNativeToDart_EventTarget(this.get$_target());
},
 get$_target: function() {
  return this.target;
}
});

$.$defineNativeClass('EventException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.Events$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('File', {
 is$File: function() { return true; }
});

$.$defineNativeClass('FileException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileReader', {
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriter', {"": ["length?"],
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"": ["length?"]
});

$.$defineNativeClass('Float32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFormElement', {"": ["length?", "target?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', {"": ["height?", "width?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', {
 get$on: function() {
  return $.FrameSetElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHRElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
}
});

$.$defineNativeClass('HTMLHeadElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHtmlElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequest', {
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('XMLHttpRequestException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestUpload', {
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBCursor', {"": ["key?"]
});

$.$defineNativeClass('IDBCursorWithValue', {"": ["value?"]
});

$.$defineNativeClass('IDBDatabase', {
 get$on: function() {
  return $.IDBDatabaseEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBObjectStore', {
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
  return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('IDBOpenDBRequest', {
 get$on: function() {
  return $.IDBOpenDBRequestEvents$(this);
}
});

$.$defineNativeClass('IDBRequest', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.IDBRequestEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {
 get$on: function() {
  return $.IDBTransactionEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeRequest', {
 get$on: function() {
  return $.IDBVersionChangeRequestEvents$(this);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ImageData', {"": ["height?", "width?"],
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', {"": ["height=", "pattern?", "value=", "valueAsNumber=", "width="],
 get$on: function() {
  return $.InputElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLKeygenElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', {"": ["target?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('History', {"": ["length?"],
 back$0: function() {
  return this.back();
},
 get$back: function() { return new $.BoundClosure0(this, 'back$0'); }
});

$.$defineNativeClass('Location', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('LocalMediaStream', {
 stop$0: function() {
  return this.stop();
}
});

$.$defineNativeClass('DOMWindow', {"": ["innerHeight?", "innerWidth?"],
 get$document: function() {
  return this.document;
},
 requestAnimationFrame$1: function(callback) {
  this._ensureRequestAnimationFrame$0();
  return this._requestAnimationFrame$1(callback);
},
 _requestAnimationFrame$1: function(callback) {
  return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
},
 _ensureRequestAnimationFrame$0: function() {
  if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
    return;
    (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
},
 get$on: function() {
  return $.LocalWindowEvents$(this);
},
 get$top: function() {
  return $._convertNativeToDart_Window(this.get$_top());
},
 get$_top: function() {
  return this.top;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 moveTo$2: function(x, y) {
  return this.moveTo(x,y);
},
 stop$0: function() {
  return this.stop();
}
});

$.$defineNativeClass('HTMLMapElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', {"": ["height=", "width="],
 stop$0: function() {
  return this.stop();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaController', {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', {
 get$on: function() {
  return $.MediaElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaList', {"": ["length?"]
});

$.$defineNativeClass('MediaQueryList', {
 addListener$1: function(listener) {
  return this.addListener(listener);
}
});

$.$defineNativeClass('MediaSource', {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrack', {
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackList', {"": ["length?"],
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMenuElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('MessagePort', {
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMetaElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMeterElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('MouseEvent', {
 get$offsetX: function() {
  if (!!this.offsetX)
    return this.offsetX;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$("offsetX is only supported on elements"));
    return $.sub(this.clientX, this.get$target().getBoundingClientRect$0().get$left());
  }
},
 get$offsetY: function() {
  if (!!this.offsetY)
    return this.offsetY;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$("offsetY is only supported on elements"));
    return $.sub(this.clientY, this.get$target().getBoundingClientRect$0().get$top());
  }
}
});

$.$defineNativeClass('MutationRecord', {"": ["target?"]
});

$.$defineNativeClass('NamedNodeMap', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Node', {
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    this.get$parent().$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 get$document: function() {
  return this.ownerDocument;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
  return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  this.textContent = value;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
}
});

$.$defineNativeClass('Notification', {
 get$on: function() {
  return $.NotificationEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLOListElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptGroupElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOutputElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParagraphElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', {
 get$on: function() {
  return $.PeerConnection00Events$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLPreElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', {"": ["target?"]
});

$.$defineNativeClass('HTMLProgressElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLQuoteElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('RTCDataChannel', {
 get$on: function() {
  return $.RTCDataChannelEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCPeerConnection', {
 get$on: function() {
  return $.RTCPeerConnectionEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RadioNodeList', {"": ["value="]
});

$.$defineNativeClass('Range', {
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Rect', {"": ["left?", "top?"]
});

$.$defineNativeClass('SQLResultSetRowList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Screen', {"": ["height?", "width?"]
});

$.$defineNativeClass('HTMLScriptElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ScriptProcessorNode', {
 get$on: function() {
  return $.ScriptProcessorNodeEvents$(this);
}
});

$.$defineNativeClass('HTMLSelectElement', {"": ["length=", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLShadowElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SharedWorkerContext', {
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('SourceBufferList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SpeechGrammarList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognition', {
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 stop$0: function() {
  return this.stop();
}
});

$.$defineNativeClass('SpeechRecognitionResult', {"": ["length?"]
});

$.$defineNativeClass('Storage', {
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1(key);
},
 operator$indexSet$2: function(key, value) {
  this.$dom_setItem$2(key, value);
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$length: function() {
  return this.get$$$dom_length();
},
 get$isEmpty: function() {
  return this.$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
  return this.length;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"": ["key?"]
});

$.$defineNativeClass('HTMLStyleElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableCaptionElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTextAreaElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TextMetrics', {"": ["width?"]
});

$.$defineNativeClass('TextTrack', {
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', {"": ["text!"],
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {"": ["length?"],
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"": ["length?"]
});

$.$defineNativeClass('HTMLTitleElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Touch', {
 get$target: function() {
  return $._convertNativeToDart_EventTarget(this.get$_target());
},
 get$_target: function() {
  return this.target;
}
});

$.$defineNativeClass('TouchList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLUListElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Uint16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLUnknownElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLVideoElement', {"": ["height=", "width="]
});

$.$defineNativeClass('WebKitNamedFlow', {
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Worker', {
 get$on: function() {
  return $.WorkerEvents$(this);
}
});

$.$defineNativeClass('WorkerContext', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.WorkerContextEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WorkerLocation', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XPathException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSRuleList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('ClientRectList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMStringList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$_FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('NodeList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this.iterator$0(); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAElement', {"": ["target?"]
});

$.$defineNativeClass('SVGAngle', {"": ["value="]
});

$.$defineNativeClass('SVGAnimatedLengthList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumberList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedTransformList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGElementInstance', {
 get$on: function() {
  return $.ElementInstanceEvents$(this);
}
});

$.$defineNativeClass('SVGFEBlendElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFECompositeElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEDropShadowElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEFloodElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEImageElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEMergeElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEMorphologyElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFEOffsetElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFETileElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFETurbulenceElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGFilterElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGForeignObjectElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGImageElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGLength', {"": ["value="]
});

$.$defineNativeClass('SVGLengthList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGNumber', {"": ["value="]
});

$.$defineNativeClass('SVGNumberList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPatternElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGPointList', {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGRect', {"": ["height=", "width="]
});

$.$defineNativeClass('SVGRectElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGStringList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGException', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGSVGElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGTransformList', {
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGUseElement', {"": ["height?", "width?"]
});

$.$defineNativeClass('SVGElementInstanceList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

// 237 dynamic classes.
// 355 classes
// 33 !leaf
(function() {
  var v0_Uint8Array = 'Uint8Array|Uint8ClampedArray', v1_MediaElement = 'HTMLMediaElement|HTMLAudioElement|HTMLVideoElement', v2_MouseEvent = 'MouseEvent|WheelEvent', v3_Element = [v1_MediaElement, 'Element|HTMLElement|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement'].join('|'), v4_CharacterData = 'CharacterData|Text|CDATASection|Comment', v5_Document = 'Document|HTMLDocument|SVGDocument', v6_DocumentFragment = 'DocumentFragment|ShadowRoot', v7_Node = [v3_Element, v4_CharacterData, v5_Document, v6_DocumentFragment, 'Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction'].join('|'), v8_AbstractWorker = 'AbstractWorker|SharedWorker|Worker', v9_WorkerContext = 'WorkerContext|DedicatedWorkerContext|SharedWorkerContext', v10_IDBRequest = 'IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest', v11_MediaStream = 'MediaStream|LocalMediaStream';
  $.dynamicSetMetadata([['WorkerContext', v9_WorkerContext], ['CSSValueList', 'CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue'], ['NodeList', 'NodeList|RadioNodeList'], ['AbstractWorker', v8_AbstractWorker], ['Uint8Array', v0_Uint8Array], ['ArrayBufferView', [v0_Uint8Array, 'ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array'].join('|')], ['AudioParam', 'AudioParam|AudioGain'], ['Blob', 'Blob|File'], ['CharacterData', v4_CharacterData], ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList'], ['Document', v5_Document], ['DocumentFragment', v6_DocumentFragment], ['HTMLMediaElement', v1_MediaElement], ['Element', v3_Element], ['Entry', 'Entry|DirectoryEntry|FileEntry'], ['EntrySync', 'EntrySync|DirectoryEntrySync|FileEntrySync'], ['MouseEvent', v2_MouseEvent], ['Event', [v2_MouseEvent, 'Event|WebKitAnimationEvent|AudioProcessingEvent|BeforeLoadEvent|CloseEvent|UIEvent|CompositionEvent|KeyboardEvent|TextEvent|TouchEvent|SVGZoomEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|ProgressEvent|XMLHttpRequestProgressEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent'].join('|')], ['Node', v7_Node], ['IDBRequest', v10_IDBRequest], ['MediaStream', v11_MediaStream], ['EventTarget', [v7_Node, v8_AbstractWorker, v9_WorkerContext, v10_IDBRequest, v11_MediaStream, 'EventTarget|AudioContext|BatteryManager|DOMApplicationCache|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|IDBDatabase|IDBTransaction|DOMWindow|MediaController|MediaSource|MediaStreamTrack|MediaStreamTrackList|MessagePort|Notification|PeerConnection00|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|SVGElementInstance'].join('|')], ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection'], ['IDBCursor', 'IDBCursor|IDBCursorWithValue']]);
})();


//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.main(); });
      } else {
        $.main();
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.main(); });
  } else {
    $.main();
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''] || [], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=Spirodraw.dart.js.map